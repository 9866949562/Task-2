1.1 Create a class person with properties(name,age) with following features.
a.Defaultage of person should be 18;
b.A person object can be initialiedwith name and age;
c.Method to displa name and age of person.


package oops;

public class Person {
	 String name;
	 int age;
	// constructor with default age 
	 public Person(String name) {
		 this.name=name;
		 this.age=18;//default age is set to 18
	 }
	 //constructor with custom age
	 public Person(String name,int age) {
	 this.name=name;
	 this.age=age;
	 }
	 public void display() {
		System.out.println("name:"+name);
		System.out.println("age:"+age);
	 }

	public static void main(String[] args) {
		Person person1=new Person("sandy");
		person1.display();
		//create person with custom age
		Person person2=new Person("Aru",29);
		person2.display();
		

	}

}


OUTPUT:
name:sandy
age:18
name:Aru
age:29

1.2 Create class product (pid,price,quantity)with parameterized constructor.create a main function in different class(say XYZ) and perform following task:
a.Accept five product information from user and store in an array
b.Find pid of the product with the highest price.
c.create method(with array of products object as argument) in XYZ class to calculate and return the total amount spent on all products..(amount spent on single product=price of product*quantity of product)  


package project.example;
   import java.util.Scanner;
 public class Product {
		int pid;
		double price;
		int quantity;
		public Product(int pid,double price,int quantity) {
			this.pid=pid;
			this.price=price;
			this.quantity=quantity;
		}
		public int getPid() {
			return pid;
		}
		public double getprice() {
			return price;
		}
		public int getquantity() {
			return quantity;
		}
	}
	class  XYZ {
		
		private static final Product[] products = null;
		public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		Product[] products=new Product[5];
	// Accept product information from the user
		for(int i=0;i<5;i++) {
			System.out.println("Enter product"+(i+1)+"Information:");
			System.out.println("Product ID: ");
			int pid=sc.nextInt();
			System.out.println("price: ");
			double price=sc.nextDouble();
			System.out.println("Quantity: ");
			int quantity=sc.nextInt();
			products[i]=new Product(pid,price,quantity);
		}
		//Find PId of the product with the highest price
		int highestPricePid=findProductWithHighestPrice(products);
		System.out.println("Product with the highest price(PID): "+highestPricePid);
		
		double totalAmountSpent=calculateTotalAmountSpent(products);
		System.out.println("Total amount spent on all products:" + totalAmountSpent);
		}
	public static int findProductWithHighestPrice(Product[]products) {
		double maxPrice=-1;
		int highestPricePID=-1;
		for(Product product:products) {
			if(product.getPid()>maxPrice) {
				highestPricePID=product.getPid();
			}
		}
		return highestPricePID;
	}
	public static double calculateTotalAmountSpent(Product[]products) {
		double totalAmountSpent=0;
		for(Product product:products) {
			totalAmountSpent+=product.getPrice()*product.getquantity();
		}
		return totalAmountSpent;
			}
	}
	
	
	OUTPUT:
	
Enter product1Information:
Product ID: 
22
price: 
200
Quantity: 
2
Enter product2Information:
Product ID: 
33
price: 
300
Quantity: 
3
Enter product3Information:
Product ID: 
44
price: 
900
Quantity: 
4
Enter product4Information:
Product ID: 
55
price: 
500
Quantity: 
5
Enter product5Information:
Product ID: 
66
price: 
1000
Quantity: 
6
Product with the highest price(PID): 66
Total amount spent on all products:13400.0

1.3 Create class Account with data member as balance.create two constructors(no arguments and two arguments)and perform following task
a.method to deposit the amount to the account.
b.method to ithdraw the amount from the account.
c.method to display the balance.


package Bank;

public class Account {
	double balance;
	//constructor with no arguments
public Account() {
	balance=0;
}
//constructor with two arguments
public Account( double initialBalance) {
	balance =initialBalance;
}
//method to deposit an amount to the account
public void deposit(double amount) {
	if(amount>0) {
		balance+=amount;
		System.out.println("Deposited:"+amount);
	}else {
		System.out.println("Invalid deposit amount.please enter apositive amount:");
		
	}
	
}
//method to withdraw an amount from the account
public void withdraw(double amount) {
	if(amount>0 && amount<=balance) {
		balance-=amount;
		System.out.println("withdrawn:"+amount);
	}else {
		System.out.println("Invalid withdrawal amount or insufficient balance:");
	}
}
//method to display the balance
public void displayBalance() {
	System.out.println("Current Balance:"+balance);
}

	public static void main(String[] args) {
		//Creating an account with an initial balance of 100
		Account account1=new Account(100.0);
		account1.displayBalance();
		//Depositing and withdrawing from the account
		account1.deposit(50.0);
		account1.displayBalance();
		account1.withdraw(30.0);
		account1.displayBalance();
		
		
	}
		
	}


OUTPUT:

Current Balance:100.0
Deposited:50.0
Current Balance:150.0
withdrawn:30.0
Current Balance:120.0

1.4.Define a base class person with attributes name and age.
Create a subclass Employee that inherits from person and adds attributes like emploeeID and salary.
Use the super keyword to initializ the person attriutes in the Employee constructors. 


package company;

public class Person {
	String name;
	int age;
	public Person(String name,int age) {
		this.name=name;
		this.age=age;
	}
//Getters for name and age
	public String getName() {
		return name;
	}
	public int getAge() {
		return age;
	}
}
class Employee extends Person{
int employeeID;
double salary;
public Employee (String name,int age,int employeeID,double salary) {
	super(name,age);
	this.employeeID=employeeID;
	this.salary=salary;
	
	}
//Getters from employeeID and salary
public int getEmployeeID() {
	return employeeID;
}
public double getSalary() {
	return salary;
}
	


	public static void main(String[]args) {
		//creating an employee object
		Employee employee=new Employee("Aru",30,567,50000.0);
		//Accessing attributes using getters
		System.out.println("Nmae:"+employee.getName());
		System.out.println("Age:"+employee.getAge());
		System.out.println("EmployeeID:"+employee.getEmployeeID());
		System.out.println("Salary:"+employee.getSalary());
		
	}
}


OUTPUT:

Nmae:Aru
Age:30
EmployeeID:567
Salary:50000.0




		




	

	
